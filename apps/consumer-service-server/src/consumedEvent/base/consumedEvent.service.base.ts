/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ConsumedEvent as PrismaConsumedEvent } from "@prisma/client";

export class ConsumedEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConsumedEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.consumedEvent.count(args);
  }

  async consumedEvents(
    args: Prisma.ConsumedEventFindManyArgs
  ): Promise<PrismaConsumedEvent[]> {
    return this.prisma.consumedEvent.findMany(args);
  }
  async consumedEvent(
    args: Prisma.ConsumedEventFindUniqueArgs
  ): Promise<PrismaConsumedEvent | null> {
    return this.prisma.consumedEvent.findUnique(args);
  }
  async createConsumedEvent(
    args: Prisma.ConsumedEventCreateArgs
  ): Promise<PrismaConsumedEvent> {
    return this.prisma.consumedEvent.create(args);
  }
  async updateConsumedEvent(
    args: Prisma.ConsumedEventUpdateArgs
  ): Promise<PrismaConsumedEvent> {
    return this.prisma.consumedEvent.update(args);
  }
  async deleteConsumedEvent(
    args: Prisma.ConsumedEventDeleteArgs
  ): Promise<PrismaConsumedEvent> {
    return this.prisma.consumedEvent.delete(args);
  }
}
