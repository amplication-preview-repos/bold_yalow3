/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ConsumedEvent } from "./ConsumedEvent";
import { ConsumedEventCountArgs } from "./ConsumedEventCountArgs";
import { ConsumedEventFindManyArgs } from "./ConsumedEventFindManyArgs";
import { ConsumedEventFindUniqueArgs } from "./ConsumedEventFindUniqueArgs";
import { CreateConsumedEventArgs } from "./CreateConsumedEventArgs";
import { UpdateConsumedEventArgs } from "./UpdateConsumedEventArgs";
import { DeleteConsumedEventArgs } from "./DeleteConsumedEventArgs";
import { ConsumedEventService } from "../consumedEvent.service";
@graphql.Resolver(() => ConsumedEvent)
export class ConsumedEventResolverBase {
  constructor(protected readonly service: ConsumedEventService) {}

  async _consumedEventsMeta(
    @graphql.Args() args: ConsumedEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ConsumedEvent])
  async consumedEvents(
    @graphql.Args() args: ConsumedEventFindManyArgs
  ): Promise<ConsumedEvent[]> {
    return this.service.consumedEvents(args);
  }

  @graphql.Query(() => ConsumedEvent, { nullable: true })
  async consumedEvent(
    @graphql.Args() args: ConsumedEventFindUniqueArgs
  ): Promise<ConsumedEvent | null> {
    const result = await this.service.consumedEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConsumedEvent)
  async createConsumedEvent(
    @graphql.Args() args: CreateConsumedEventArgs
  ): Promise<ConsumedEvent> {
    return await this.service.createConsumedEvent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ConsumedEvent)
  async updateConsumedEvent(
    @graphql.Args() args: UpdateConsumedEventArgs
  ): Promise<ConsumedEvent | null> {
    try {
      return await this.service.updateConsumedEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConsumedEvent)
  async deleteConsumedEvent(
    @graphql.Args() args: DeleteConsumedEventArgs
  ): Promise<ConsumedEvent | null> {
    try {
      return await this.service.deleteConsumedEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
