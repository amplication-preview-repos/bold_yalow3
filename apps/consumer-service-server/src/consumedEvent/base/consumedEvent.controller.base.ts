/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsumedEventService } from "../consumedEvent.service";
import { ConsumedEventCreateInput } from "./ConsumedEventCreateInput";
import { ConsumedEvent } from "./ConsumedEvent";
import { ConsumedEventFindManyArgs } from "./ConsumedEventFindManyArgs";
import { ConsumedEventWhereUniqueInput } from "./ConsumedEventWhereUniqueInput";
import { ConsumedEventUpdateInput } from "./ConsumedEventUpdateInput";

export class ConsumedEventControllerBase {
  constructor(protected readonly service: ConsumedEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConsumedEvent })
  async createConsumedEvent(
    @common.Body() data: ConsumedEventCreateInput
  ): Promise<ConsumedEvent> {
    return await this.service.createConsumedEvent({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        processed: true,
        processedAt: true,
        eventPayload: true,
        testField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConsumedEvent] })
  @ApiNestedQuery(ConsumedEventFindManyArgs)
  async consumedEvents(
    @common.Req() request: Request
  ): Promise<ConsumedEvent[]> {
    const args = plainToClass(ConsumedEventFindManyArgs, request.query);
    return this.service.consumedEvents({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        processed: true,
        processedAt: true,
        eventPayload: true,
        testField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConsumedEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consumedEvent(
    @common.Param() params: ConsumedEventWhereUniqueInput
  ): Promise<ConsumedEvent | null> {
    const result = await this.service.consumedEvent({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        processed: true,
        processedAt: true,
        eventPayload: true,
        testField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConsumedEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsumedEvent(
    @common.Param() params: ConsumedEventWhereUniqueInput,
    @common.Body() data: ConsumedEventUpdateInput
  ): Promise<ConsumedEvent | null> {
    try {
      return await this.service.updateConsumedEvent({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          processed: true,
          processedAt: true,
          eventPayload: true,
          testField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConsumedEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsumedEvent(
    @common.Param() params: ConsumedEventWhereUniqueInput
  ): Promise<ConsumedEvent | null> {
    try {
      return await this.service.deleteConsumedEvent({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          processed: true,
          processedAt: true,
          eventPayload: true,
          testField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
